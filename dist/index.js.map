{"mappings":";;;;;;;;;AC+BO,KAAK,CAAC,yCAAG,IAAoB,CAAI,IAAoB,CAAC;QAC3D,IAAI,EAAE,CAAK;QACX,GAAG,EAAE,CAAC;QACN,GAAG,MAAQ,yCAAG,CAAC,CAAC;;QAChB,OAAO,MAAQ,yCAAG,CAAC,CAAC;;QACpB,SAAS,GAAE,EAAE,GAAI,EAAE;;QACnB,KAAK,GAAG,OAAO,GAAK,OAAO,CAAC,CAAC;IAC/B,CAAC;;AAEM,KAAK,CAAC,yCAAE,IAAoB,KAAQ,IAAoB,CAAC;QAC9D,IAAI,EAAE,CAAI;eACV,KAAK;QACL,GAAG,GAAE,EAAE,GAAI,yCAAE,CAAC,EAAE,CAAC,KAAK;;QACtB,OAAO,GAAE,EAAE,GAAI,EAAE,CAAC,KAAK;;QACvB,SAAS,MAAQ,KAAK;;QACtB,KAAK,GAAG,CAAC,EAAE,IAAI,GAAK,IAAI,CAAC,KAAK;IAChC,CAAC","sources":["src/index.ts","src/Result.ts"],"sourcesContent":["import * as result from './Result';\n\nexport {\n  result\n};","export type Err<E, T> = \n  InstanceOperations<E, T> & \n  Deconstructos<E, T> &\n  {\n    _tag: 'err';\n    err: E;\n  };\n\nexport type Ok<E, T> = \n  InstanceOperations<E, T> & \n  Deconstructos<E, T> &\n  {\n    _tag: 'ok';\n    value: T;\n  };\n\nexport type Result<E, T> = Err<E, T> | Ok<E, T>;\n\n\ntype InstanceOperations<E, A> = {\n  map: <B>(fn: (value: A) => B) => Result<E, B>;\n  andThen: <B>(fn: (a: A) => Result<E, B>) => Result<E, B>;\n}\n\ntype Deconstructos<E, A> = {\n  getOrElse: (fn: () => A) => A;\n  match: <B, C>(onErr: (err: E) => C, onOk: (value: A) => B) => B | C\n}\n\n\n\nexport const err = <E, T = unknown>(e: E): Result<E, T> => ({\n  _tag: 'err',\n  err: e,\n  map: () => err(e),\n  andThen: () => err(e),\n  getOrElse: fn => fn(),\n  match: (onError) => onError(e)\n});\n\nexport const ok = <T, E = unknown>(value: T): Result<E, T> => ({\n  _tag: 'ok',\n  value,\n  map: fn => ok(fn(value)),\n  andThen: fn => fn(value),\n  getOrElse: () => value,\n  match: (_, onOk) => onOk(value)\n});\n"],"names":[],"version":3,"file":"index.js.map"}